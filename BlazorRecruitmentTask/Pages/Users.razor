@page "/users"
@using BlazorRecruitmentTask.Components
@using BlazorRecruitmentTask.Models
@using BlazorRecruitmentTask.Services
@using MudBlazor
@using System.Diagnostics
@inject UserService userService

<PageTitle>Użytkownicy</PageTitle>

@if (users == null)
{
    <p><em>Ładowanie...</em></p>
}
else
{
    <MudDropContainer
        @ref="dropContainer"
        T="UserModel" 
        Items="users" 
        ItemsSelector="@((item,dropzone) => item.Group == dropzone)" 
        ItemDropped="ItemDropped" 
        ItemPicked="ItemPicked"
        ItemDraggingClass="user-dragging" 
        DraggingClass="user-list-dragging" 
        Class="h-100 pb-8"
        CanDropClass="user-list-can-drop">
            <ChildContent>
                <div class="row h-100">
                    <div class="col-md-12 col-lg-3 col-xl-4">
                        <UserList History="history"></UserList>
                    </div>
                    <div class="col-md-12 col-lg-9 col-xl-8">
                        <UserGroups></UserGroups>
                    </div>
                </div>
            </ChildContent>
            <ItemRenderer>
                <div class="user @(context.WasRecentlyDropped ? "user-dropped" : "") @(context.IsSelected ? "selected" : "")" @onclick="args => SelectUser(args, context)">
                <div class="circle-icon">
                    <!--@context.Order-->
                    @if(context.Group == UserService.UnasssignedUsersGroup) {
                        <MudIcon Size="Size.Small" Icon="@Icons.Material.Outlined.Circle"></MudIcon>
                    }
                    else
                    {
                        <MudIcon Size="Size.Small" Icon="@Icons.Material.Outlined.Star"></MudIcon>
                    }
                </div>
                <div class="main-user-data p-2">
                            <div class="w-100 avatar-wrapper">
                                <MudAvatar Color="Color.Primary" Size="Size.Large" Class="mx-auto m-2">
                                    <MudImage Src="@context.Photo"></MudImage>
                                </MudAvatar>
                            </div>
                            <div class="text-center m-2">
                                @context.Name
                            </div>
                        </div>
                        <div class="text-center city p-2">
                            <div class="mx-auto">
                                <div class="d-flex flex-row align-items-center"><MudIcon Icon="@Icons.Material.Outlined.LocationOn" Size="Size.Small"></MudIcon> @context.City</div>
                            </div>
                        </div>
                    </div>
            </ItemRenderer>
        </MudDropContainer>
}

@code {
    private UserModel[]? users = null;
    private readonly List<HistoryEntryModel> history = new List<HistoryEntryModel>();
    private MudDropContainer<UserModel> dropContainer;

    protected override async Task OnInitializedAsync()
    {
        users = await userService.GetUsersAsync();
        foreach (var userGroup in users.GroupBy(u => u.Group)) {
            var index = 0;
            foreach (var user in userGroup)
                user.Order = index++; 
        }
    }

    private async void ItemDropped(MudItemDropInfo<UserModel> dropItem)
    {
        if (dropItem.Item == null)
            return;

        var currentGroup = userService.Groups.FirstOrDefault(g => g.Identifier == dropItem.Item.Group);
        if (currentGroup != null)
            history.Add(new HistoryEntryModel { Icon = currentGroup.Icon, Message = $"Użytkownik {dropItem.Item.Name} został usunięty z grupy {currentGroup.Name}." });

        var newGroup = userService.Groups.FirstOrDefault(g => g.Identifier == dropItem.DropzoneIdentifier);
        if (newGroup != null)
            history.Add(new HistoryEntryModel { Icon = newGroup.Icon, Message = $"Użytkownik {dropItem.Item.Name} został dodany do grupy {newGroup.Name}." });

        var usersToMove = users
            .Where(u => u.IsSelected && ((currentGroup != null && u.Group == currentGroup.Identifier) || (currentGroup == null && u.Group == UserService.UnasssignedUsersGroup)))
            .Union(new[] { dropItem.Item })
            .Distinct()
            .ToArray();

        await MoveToGroupAsync(usersToMove, dropItem.DropzoneIdentifier, dropItem.IndexInZone);
    }

    private async Task MoveToGroupAsync(IEnumerable<UserModel> movedUsers, string groupIdentifier, int index)
    {
        var i = 0;
        foreach (var user in users.Where(u => u.Group == groupIdentifier && !movedUsers.Contains(u)))
            user.Order = i++;

        var usersOnHigherIndexes = users.Where(u => u.Group == groupIdentifier && u.Order >= index && !movedUsers.Contains(u)).ToArray();

        foreach (var user in movedUsers) {
            user.Group = groupIdentifier;
            user.WasRecentlyDropped = true;
            user.IsSelected = false;
            user.Order = index++;
        }
        foreach (var user in usersOnHigherIndexes)
            user.Order = index++;

        users = users.OrderBy(u => u.Group).ThenBy(u => u.Order).ToArray(); //Zapobiega samoczynnemu przestawianiu przy następnym refreshu
        
        await Task.Delay(TimeSpan.FromSeconds(0.4));
        dropContainer.Refresh();
        foreach (var user in movedUsers)
        {
            user.WasRecentlyDropped = false;
        }
    }

    private void ItemPicked(MudDragAndDropItemTransaction<UserModel> dropItem)
    {
        if (dropItem.Item == null)
            return;

        dropItem.Item.WasRecentlyDropped = false;
    }

    private async void SelectUser(MouseEventArgs args, UserModel user)
    {
        if (!args.ShiftKey) {
            foreach (var u in users)
                u.IsSelected = false;
        }

        user.IsSelected = args.ShiftKey ? !user.IsSelected : true;
        dropContainer.Refresh();
    }
}