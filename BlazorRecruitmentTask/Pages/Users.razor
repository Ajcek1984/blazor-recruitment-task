@page "/users"
@using BlazorRecruitmentTask.Components
@using BlazorRecruitmentTask.Data
@using MudBlazor
@inject UserService userService

<PageTitle>Użytkownicy</PageTitle>

@if (users == null)
{
    <p><em>Ładowanie...</em></p>
}
else
{
    <MudDropContainer T="User" Items="users" ItemsSelector="@((item,dropzone) => item.Group == dropzone)" 
        ItemDropped="ItemDropped" 
        ItemPicked="ItemPicked"
        ItemDraggingClass="user-dragging" 
        DraggingClass="user-list-dragging" 
        CanDropClass="user-list-can-drop">
            <ChildContent>
            <div class="row">
                <div class="col-md-3">
                    <UserList></UserList>
                </div>
                <div class="col-md-9">
                    <UserGroups></UserGroups>
                </div>
            </div>

            </ChildContent>
            <ItemRenderer>
            <div class="user @(context.WasRecentlyDropped ? "user-dropped" : "")">
                        <div class="main-user-data p-2">
                            <div class="w-100 avatar-wrapper">
                                <MudAvatar Color="Color.Primary" Size="Size.Large" Class="mx-auto m-2">
                                    <MudImage Src="@context.Photo"></MudImage>
                                </MudAvatar>
                            </div>
                            <div class="text-center m-2">
                                @context.Name
                            </div>
                        </div>
                        <div class="text-center city p-2">
                            <div class="mx-auto">
                                <div class="d-flex flex-row align-items-center"><MudIcon Icon="@Icons.Material.Outlined.LocationOn" Size="Size.Small"></MudIcon> @context.City</div>
                            </div>
                        </div>
                    </div>
            </ItemRenderer>
        </MudDropContainer>
}

@code {
    private User[]? users = null;
    protected override async Task OnInitializedAsync()
    {
        users = await userService.GetUsersAsync();
    }

    private void ItemDropped(MudItemDropInfo<User> dropItem)
    {
        if (dropItem.Item == null)
            return;

        dropItem.Item.Group = dropItem.DropzoneIdentifier;
        dropItem.Item.WasRecentlyDropped = true;
        foreach (var user in users.Where(u => u != dropItem.Item))
            user.WasRecentlyDropped = false;
    }

    private void ItemPicked(MudDragAndDropItemTransaction<User> dropItem)
    {
        if (dropItem.Item == null)
            return;

        dropItem.Item.WasRecentlyDropped = false;
    }
}