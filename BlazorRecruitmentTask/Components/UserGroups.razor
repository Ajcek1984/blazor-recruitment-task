@using BlazorRecruitmentTask.Models
@using MudBlazor

<div class="component-container">
    <div class="groups-container d-flex flex-row mb-6 align-items-start">
        @foreach (var group in groups)
        {
            <MudButton Variant="Variant.Filled" OnClick="() => {selectedGroup = group; StateHasChanged();}" Class="@GetGroupButtonClass(group)">
                <div class="d-flex flex-row align-items-center"><MudIcon Icon="@group.Icon()" Size="Size.Small"></MudIcon> @group.Name</div>
            </MudButton>
        }
    </div>
    @if (selectedGroup != null) {
        <MudDropZone T="UserModel" Identifier="@selectedGroup.Identifier" Class="user-list" AllowReorder=true>
        </MudDropZone>
    }
</div>


@code {
    private UserGroupModel[] groups = new[]
    {
            new UserGroupModel { Identifier = "Group1", Name="Grupa 1", Icon= () => Icons.Material.Filled.Star },
            new UserGroupModel { Identifier = "Group2", Name="Grupa 2", Icon= () => Icons.Material.Filled.Face2 },
            new UserGroupModel { Identifier = "Group3", Name="Grupa 3", Icon= () => Icons.Material.Filled.Face },
            new UserGroupModel { Identifier = "Group4", Name="Grupa 4", Icon= () => Icons.Material.Filled.ArrowDropUp },
            new UserGroupModel { Identifier = "Group5", Name="Grupa 5", Icon= () => Icons.Material.Filled.Square }
    };

    private UserGroupModel? selectedGroup;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        selectedGroup = groups[0];
    }

    private string GetGroupButtonClass(UserGroupModel group) => selectedGroup == group ? "group-button selected" : "group-button";
}
