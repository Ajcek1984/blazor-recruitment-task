@using BlazorRecruitmentTask.Data
@using MudBlazor
@inject UserService userService

<div class="component-container">
<h3>Użytkownicy</h3>
@if (users == null)
{
    <p><em>Ładowanie...</em></p>
}
else
{
         <MudDropContainer T="User" Items="users" ItemsSelector="@((item,dropzone) => item.Group == dropzone)">
            <ChildContent> 
                <MudDropZone T="User" Identifier="@UserService.UnasssignedUsersGroup" Class="user-list"> 
                </MudDropZone>
            </ChildContent>
            <ItemRenderer>
                    <div class="user">
                        <div class="main-user-data p-2">
                            <div class="w-100 avatar-wrapper">
                                <MudAvatar Color="Color.Primary" Size="Size.Large" Class="mx-auto m-2">
                                    <MudImage Src="@context.Photo"></MudImage>
                                </MudAvatar>
                            </div>
                            <div class="text-center m-2">
                                @context.Name
                            </div>
                        </div>
                        <div class="text-center city p-2">
                            <div class="mx-auto">
                                <div class="d-flex flex-row align-items-center"><MudIcon Icon="@Icons.Material.Outlined.LocationOn" Size="Size.Small"></MudIcon> @context.City</div>
                            </div>
                        </div>
                    </div>
            </ItemRenderer>
        </MudDropContainer>
 
}

@code {
    private List<User>? users = null;
    protected override async Task OnInitializedAsync()
    {
        users = await userService.GetUsersAsync();
    }
}

</div>